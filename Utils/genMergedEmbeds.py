"""

"""

import warnings 
import numpy as np 
import pandas as pd 
import seaborn as sns 
import matplotlib.pyplot as plt 
import scipy.io

from scipy.stats import linregress
from sklearn.metrics.pairwise import cosine_similarity


Messages = pd.read_pickle("./Database/Messages.pkl")
Demographics = pd.read_pickle("./Database/Demographics.pkl")
Emails = pd.read_pickle("./Database/OriginalPaper/Emails.pkl")
EmailEmbeddings = pd.read_pickle("./Database/OriginalPaper/EmailEmbeddings.pkl")
Annotations = pd.read_pickle("./Database/OriginalPaper/Annotations.pkl")

EmailEmbeddings.rename(columns={'Embedding':'Email Embedding'}, inplace=True)
EmailEmbeddings["Email Embedding"] = [np.array([float(y) for y in x]).reshape(1,-1) for x in EmailEmbeddings["Email Embedding"]]
Demographics = Demographics[Demographics['Open Response Embedding'] != -1]
Demographics['Open Response Embedding'] = [np.array([float(y) for y in x]).reshape(1,-1) for x in Demographics['Open Response Embedding']]

Messages.rename(columns={'Embedding':"Message Embedding"}, inplace=True)
Messages["Message Embedding"] = [np.array([float(y) for y in x]).reshape(1,-1) for x in Messages["Message Embedding"]]

Improvements = []

Messages['User Improvement'] = [Annotations[(Annotations['UserId'] == Message['UserId']) & (Annotations['PhaseValue'] == 'postTraining')]['Correct'].mean() - Annotations[(Annotations['UserId'] == Message['UserId']) & (Annotations['PhaseValue'] == 'preTraining')]['Correct'].mean() for _, Message in Messages.iterrows()]

"""
Post-Experiment Questionnaire

Q1. Of the phishing emails you’ve encountered, what percentage do you think were generated by artificial intelligence models?
	•	☐ 100% of the phishing emails I read were written by an Artificial Intelligence model.
	•	☐ 75% of the phishing emails I read were written by an Artificial Intelligence model.
	•	☐ 50% of the phishing emails I read were written by an Artificial Intelligence model.
	•	☐ 25% of the phishing emails I read were written by an Artificial Intelligence model.

Q2. Of the ham (i.e., non-phishing) emails you’ve encountered, what percentage do you think were generated by artificial intelligence models?
	•	☐ 100% of the ham emails I read were written by an Artificial Intelligence model.
	•	☐ 75% of the ham emails I read were written by an Artificial Intelligence model.
	•	☐ 50% of the ham emails I read were written by an Artificial Intelligence model.
	•	☐ 25% of the ham emails I read were written by an Artificial Intelligence model.

Q3. Of the phishing emails you’ve encountered, what percentage do you think were styled (i.e., the appearance and format) by artificial intelligence models?
	•	☐ 100% of the phishing emails I read were styled by an Artificial Intelligence model.
	•	☐ 75% of the phishing emails I read were styled by an Artificial Intelligence model.
	•	☐ 50% of the phishing emails I read were styled by an Artificial Intelligence model.
	•	☐ 25% of the phishing emails I read were styled by an Artificial Intelligence model.

Q4. Of the ham (i.e., non-phishing) emails you’ve encountered, what percentage do you think were styled (i.e., the appearance and format) by artificial intelligence models?
	•	☐ 100% of the ham emails I read were styled by an Artificial Intelligence model.
	•	☐ 75% of the ham emails I read were styled by an Artificial Intelligence model.
	•	☐ 50% of the ham emails I read were styled by an Artificial Intelligence model.
	•	☐ 25% of the ham emails I read were styled by an Artificial Intelligence model.

Q5. What criteria did you use to identify whether an email was a phishing attempt?
	•	Open response: _______________________________________________
"""

WritingPerceptions = []
QuizScores = []
ResponseMessageSimilarities = []
for idx, MessageEmbedding in Messages.iterrows():
    
    UserDemographics = Demographics[Demographics['UserId'] == MessageEmbedding['UserId']]
    if(len(UserDemographics) == 0):
        WritingPerceptions.append(-1)
        QuizScores.append(-1)
        ResponseMessageSimilarities.append(-1)
        continue 

    PQ1 = UserDemographics['PQ1'].item()
    PQ2 = UserDemographics['PQ2'].item()
    PQ3 = UserDemographics['PQ3'].item()
    PQ4 = UserDemographics['PQ4'].item()
    WritingPerception = 0 
    

    for PQ in [PQ1, PQ2, PQ3, PQ4]:
        if('0p' in PQ):
                WritingPerception += 0
        if('25p' in PQ):
                WritingPerception += 25
        if('50p' in PQ):
                WritingPerception += 50 
        if('75p' in PQ):
                WritingPerception += 75
        if('100p' in PQ):
                WritingPerception += 100
    
    Q1 = UserDemographics['Q1'].item()
    Q2 = UserDemographics['Q2'].item()
    Q3 = UserDemographics['Q3'].item()
    Q4 = UserDemographics['Q4'].item()
    Q5 = UserDemographics['Q5'].item()

    QuizScore = 0 
    if(Q1 == 0):
        QuizScore += 1
    if(Q2 == 1):
        QuizScore += 1 
    if(Q3 == 3):
        QuizScore += 1 
    if(Q4 == 2):
        QuizScore += 1
    if(Q5 == 1):
        QuizScore += 1

    m = MessageEmbedding["Message Embedding"]
    e = UserDemographics['Open Response Embedding'].item()
    if(len(e[0]) == 0 or len(m[0]) == 0):
        ResponseMessageSimilarity = -1
    else:
        ResponseMessageSimilarity = float(round(float(cosine_similarity(m, e)[0, 0]) / 0.025) * 0.025)

    WritingPerception = WritingPerception / 4
    
    WritingPerceptions.append(WritingPerception)
    QuizScores.append(QuizScore)
    ResponseMessageSimilarities.append(ResponseMessageSimilarity)

Messages['Perception of Emails as AI Generated'] = WritingPerceptions
Messages['Pre-Experiment Quiz Score'] = QuizScores
Messages['Response Message Similarity'] = ResponseMessageSimilarities
Messages = Messages[Messages['Response Message Similarity'] != -1]

df = Messages.merge(
    EmailEmbeddings[["EmailId", "Email Embedding"]],
    on="EmailId",
    how="left",
    suffixes=("", "_Email"),
)

df = df.merge(
    Demographics,
    on="UserId",
    how="left"
)

# Keep only valid, same-dimension pairs
df = df.dropna(subset=["Message Embedding", "Email Embedding"]).copy()
same_dim = df.apply(lambda r: r["Message Embedding"].shape[1] == r["Email Embedding"].shape[1], axis=1)
df = df[same_dim].copy()

# Compute scalar cosine similarity
df["Message Email Similarity"] = [
    float(round(float(cosine_similarity(m, e)[0, 0]) / 0.025) * 0.025) for m, e in zip(df["Message Embedding"], df["Email Embedding"])
]

df['Message Email Similarity'] = df.groupby('Role')['Message Email Similarity'].transform(
    lambda s: (s - s.min()) / (s.max() - s.min()) if s.max() > s.min() else 0.0
)
# Normalize to between 0 and 1
import re

def pretty_name(col: str) -> str:
    # Expand PQ codes
    if re.fullmatch(r'PQ\d+', col):
        return "Post Experiment Question " + col[2:]
    # Expand Q codes
    if re.fullmatch(r'Q\d+', col):
        return "Question " + col[1:]
    # Split CamelCase
    col = re.sub(r'(?<!^)(?=[A-Z])', ' ', col)
    # Collapse multiple spaces and strip
    col = re.sub(r'\s+', ' ', col).strip()
    return col

df.columns = [pretty_name(col) for col in df.columns]
Demographics.columns = [pretty_name(col) for col in Demographics.columns]
Messages.columns = [pretty_name(col) for col in Messages.columns]

df.rename(columns={'Pre- Experiment Quiz Score': 'Pre Experiment Quiz Score', 'Perception of Emails as A I Generated': 'AI Generation Perception', 'Post Experiment Question 5': 'Open Response'}, inplace=True)
Demographics.rename(columns={'Pre- Experiment Quiz Score': 'Pre Experiment Quiz Score', 'Perception of Emails as A I Generated': 'AI Generation Perception', 'Post Experiment Question 5': 'Open Response'}, inplace=True)
Messages.rename(columns={'Pre- Experiment Quiz Score': 'Pre Experiment Quiz Score', 'Perception of Emails as A I Generated': 'AI Generation Perception', 'Post Experiment Question 5': 'Open Response'}, inplace=True)

print(df.columns) 
"""
Index(['User Id', 'Experiment', 'Email Id', 'Phase Trial', 'Decision',
       'Message Num', 'Message', 'Email Type', 'Phase Value',
       'Experiment Condition', 'Confidence', 'Email Action', 'Reaction Time',
       'Correct', 'Role', 'Content', 'Message Embedding', 'User Improvement',
       'Perception of Emails as AI Generated', 'Pre Experiment Quiz Score',
       'Response Message Similarity', 'Email Embedding', 'Age', 'Gender',
       'Education', 'Country', 'Victim', 'Chatbot', 'Question 0', 'Question 1',
       'Question 2', 'Question 3', 'Question 4', 'Question 5',
       'Post Experiment Question 1', 'Post Experiment Question 2',
       'Post Experiment Question 3', 'Post Experiment Question 4',
       'Post Experiment Open Response', 'Open Response Embedding',
       'Message Email Similarity'],
      dtype='object')
"""

print(Demographics.columns)
"""
Index(['UserId', 'Age', 'Gender', 'Education', 'Country', 'Victim', 'Chatbot',
       'Q0', 'Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'PQ1', 'PQ2', 'PQ3', 'PQ4', 'PQ5',
       'Open Response Embedding'],
      dtype='object')
"""
for col in Demographics.columns:
    print(len(col))

print(Messages.columns)
"""
Index(['UserId', 'Experiment', 'EmailId', 'PhaseTrial', 'Decision',
       'MessageNum', 'Message', 'EmailType', 'PhaseValue',
       'ExperimentCondition', 'Confidence', 'EmailAction', 'ReactionTime',
       'Correct', 'Role', 'Content', 'Message Embedding', 'User Improvement',
       'Perception of Emails as AI Generated', 'Pre-Experiment Quiz Score',
       'Response Message Similarity'],
      dtype='object')
"""
for col in Messages.columns:
    print(len(col))

df['User Initial Performance'] = [Annotations[(Annotations['UserId'] == MessageEmbedding['User Id']) & (Annotations['PhaseValue'] == 'preTraining')]['Correct'].mean() for _, MessageEmbedding in df.iterrows()]
df['User Improvement'] = [Annotations[(Annotations['UserId'] == MessageEmbedding['User Id']) & (Annotations['PhaseValue'] == 'postTraining')]['Correct'].mean() - Annotations[(Annotations['UserId'] == MessageEmbedding['User Id']) & (Annotations['PhaseValue'] == 'preTraining')]['Correct'].mean() for _, MessageEmbedding in df.iterrows()]
df['User Final Performance'] = [Annotations[(Annotations['UserId'] == MessageEmbedding['User Id']) & (Annotations['PhaseValue'] == 'postTraining')]['Correct'].mean() for _, MessageEmbedding in df.iterrows()]

target_map = {"Correct": 'Correct Categorization', "Confidence": 'Categorization Confidence', "Reaction Time": "Reaction Time"}
df.rename(columns=target_map, inplace=True)

import mat4py as mp

df.to_pickle("Database/df.pkl")
df.to_csv("Database/df.csv")
df.rename(columns=lambda x:x.replace(' ', '_'), inplace=True)  
scipy.io.savemat('df.mat', {'structs':df.apply(tuple).to_dict()})

Demographics.to_pickle("Database/DemographicsNew.pkl")
Demographics.to_csv("Database/DemographicsNew.csv")
Demographics.rename(columns=lambda x:x.replace(' ', '_'), inplace=True)  
scipy.io.savemat('Database/DemographicsNew.mat', {'structs':Demographics.apply(tuple).to_dict()})

Messages.to_pickle("Database/MessagesNew.pkl")
Messages.to_csv("Database/MessagesNew.csv")
Messages.rename(columns=lambda x:x.replace(' ', '_'), inplace=True)  
scipy.io.savemat('Database/MessagesNew.mat', {'structs':Messages.apply(tuple).to_dict()})

